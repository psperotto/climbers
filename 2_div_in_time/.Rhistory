# reading the data
p<- read.delim("G:/Meu Drive/Papers/Diversificação/wcvp_v7_dec_2021.txt", sep="|", header=T)
powo<-subset(p, rank=="SPECIES") # coluna 'taxon_name' pra nomes
# reading the data
# setwd("G:/Meu Drive/Papers/Diversificação/climbers/Data")
climbers<-read.csv("G:/Meu Drive/Papers/Diversificação/climbers/Data/climber_database.csv", stringsAsFactors = F)
# filtering powo to climbing accepted species
c <- powo %>% filter(taxon_name %in% climbers$Species) # works fine
library(beepr)
library(phangorn)
library(ape)
library(dplyr)
library(arsenal)
library(tidyverse)
library(geiger)
# filtering powo to climbing accepted species
c <- powo %>% filter(taxon_name %in% climbers$Species) # works fine
climbers_acc <- subset(c, taxonomic_status=="Accepted") # accepted names
climbers_exc <- subset(c, taxonomic_status!="Accepted") # non accepted names
# counting species of climbers per family and per genera
spp.family<-as.data.frame(table(unlist(climbers_acc$family)))
colnames(spp.family)<-c("Family", "Nr")
spp.family<-spp.family[order(-spp.family$Nr),]
spp.genera<-as.data.frame(table(unlist(climbers_acc$genus)))
colnames(spp.genera)<-c("Genus", "Nr")
spp.genera<-spp.genera[order(-spp.genera$Nr),]
View(spp.genera)
# finding all species per genera of climbers
sppall.POWO <- powo %>% filter(genus %in% spp.genera$Genus)
sppall.POWO <- subset(sppall.POWO,taxonomic_status=="Accepted")
sppall.POWO <- as.data.frame(table(unlist(sppall.POWO$genus)))
colnames(sppall.POWO)<-c("Genus", "Nr")
sppall.POWO <- sppall.POWO[order(-sppall.POWO$Nr),] # agora foi!!
View(sppall.POWO)
spp.genera<-as.data.frame(table(unlist(climbers_acc$genus)))
colnames(spp.genera)<-c("Genus", "Nr")
sppall.POWO <- powo %>% filter(genus %in% spp.genera$Genus)
sppall.POWO <- subset(sppall.POWO,taxonomic_status=="Accepted")
sppall.POWO <- as.data.frame(table(unlist(sppall.POWO$genus)))
colnames(sppall.POWO)<-c("Genus", "Nr")
# calculating the proportions
percent.POWO<-data.frame(sppall.POWO$Genus, c(spp.genera$Nr/sppall.POWO$Nr))
View(percent.POWO)
# isso ta mto estranho, olhar melhor
colnames(percent.POWO)<-c("Genus","perc_NT_spp")
percent.POWO<-percent.POWO[order(-percent.POWO$perc_NT_spp),]
# selecting only genera with >75%
genera75.POWO<-subset(percent.POWO, perc_NT_spp>=0.75)
View(genera75.POWO)
rownames(genera75.POWO)<-genera75.POWO$Genus
# selecting only genera with >75%
genera75.POWO<-subset(percent.POWO, perc_NT_spp>=0.75)
saveRDS(genera75.POWO, file="G:/Meu Drive/Papers/Diversificação/climbers/Data/genera75.POWO.Rdata")
rm(p, powo)
# getting age of stem and crown node
treegenera <- readRDS("G:/Meu Drive/Papers/Diversificação/climbers/Data/treegenera.RDS")
# getting age of stem and crown node
treegenera <- readRDS("G:/Meu Drive/Papers/Diversificação/climbers/Data/treegenera.Rdata")
get.node.age <- function (phy) {
root.node <- length(phy$tip.label)+1
seq.nodes <- phy$edge
dists <- phy$edge.length
res <- numeric(max(phy$edge))
for (i in seq_len(nrow(seq.nodes))) {
res[seq.nodes[i, 2]] <- res[seq.nodes[i,1]] + dists[i]
}
ages <- abs(round(res,3)-round(max(res),3))
return(ages)
} # fun?ao pra pegar os node ages
genera<-as.character(genera75.POWO$Genus)
results <- matrix(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, ? pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condi??o n?o ? fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(treegenera, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
View(results)
########## preparando a tabela q vai servir de base pros calculos de net.div ##########
results<-as.data.frame(results)
results <- data.frame(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, ? pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condi??o n?o ? fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(treegenera, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
View(results)
colnames(results)<-c("Genus", "Crown_Age","Stem_Age")
results<-subset(results, Stem_Age!="/") # deixando s? generos que tem Stem Age
length(results$Genus) # 119
#rownames(results)<-c(1:119)
saveRDS(results, file = "G:/Meu Drive/Papers/Diversificação/climbers/Data/crown_stem_ages.POWO.Rdata")
f<-sppall.POWO$Genus %in% results$Genus
f<-as.numeric(which(f==T))
f
f<-sppall.POWO$Genus %in% results$Genus
f
d<-sppall.POWO[f,]
d
length(d)
length(d$Genus)
d<-d[order(d$Genus),]
d
results2<-cbind(results,d$Nr)
colnames(results2)[4]<-"Nr"
View(results2)
View(d)
rm(d,f,results2)
library(beepr)
library(phangorn)
library(ape)
library(dplyr)
library(arsenal)
library(tidyverse)
library(geiger)
View(results)
View(spp.family)
View(results)
example <- get.template(save.file=F)
####
get.template <- function(output.dir = getwd(), save.file=TRUE) {
template <- data.frame(taxa=c("bg_clade","Calycanthales","Asterales","Myrtales","Arecaceae_c","Arecaceae_s"),
diversity=c(262196, 10, 25996, 10782, 2780, 2780),
node=c("bg","SG","CG","CG","CG","SG"),
age_mean=c(132, 108.8, 28.75, 88.2, 77.4, 84),
stringsAsFactors = FALSE)
template$age_upper <- template$age_mean + 5
template$age_lower <- template$age_mean - 5
# if(save.file) {
#    write.csv(template, file=paste0(output.dir,"/template.csv"))
#  }
return(template)
}
example <- get.template(save.file=F)
View(example)
#climbers_exc <- subset(c, taxonomic_status!="Accepted") # non accepted names
rm(climbers_exc)
View(spp.family)
View(spp.genera)
write.csv(spp.family, file="climberfamilies.csv")
APGIV<-read.csv("G:/Meu Drive/Papers/Diversificação/climbers/Data/APGIV.csv")
APGIV<-read.csv("G:/Meu Drive/Papers/Diversificação/climbers/Data/APGIV.csv", sep=",")
View(APGIV)
APGIV<-read.csv("G:/Meu Drive/Papers/Diversificação/climbers/Data/APGIV.csv", sep=",")
View(APGIV)
grepl(" ",APGIV[,1])
grepl(" ",APGIV[,3])
APGIV[9,3]
APGIV[569,3]
p<- read.delim("G:/Meu Drive/Papers/Diversificação/wcvp_v7_dec_2021.txt", sep="|", header=T)
powo<-subset(p, rank=="SPECIES") # coluna 'taxon_name' pra nomes
View(powo)
powo<-subset(powo, taxonomic_status=="Accepted")
# filtering powo to climbing accepted species
c <- powo %>% filter(taxon_name %in% climbers$Species) # works fine
powo<-subset(p, rank=="SPECIES") # coluna 'taxon_name' pra nomes
# filtering powo to climbing accepted species
c <- powo %>% filter(taxon_name %in% climbers$Species) # works fine
p<-subset(p, rank=="SPECIES") # coluna 'taxon_name' pra nomes
powo<-subset(p, taxonomic_status=="Accepted")
spp.all <- powo %>% filter(genus %in% spp.genera$Genus)
spp.all <- as.data.frame(table(unlist(spp.all$genus)))
View(spp.all)
colnames(spp.all)<-c("Genus", "Nr")
# counting species of climbers per family
spp.family<-as.data.frame(table(unlist(climbers_acc$family)))
colnames(spp.family)<-c("Family", "Nr")
View(spp.family)
View(spp.genera)
# counting species of climbers per genera
spp.genera<-as.data.frame(table(unlist(climbers_acc$genus)))
colnames(spp.genera)<-c("Genus", "Nr")
spp.genera[,1] == spp.all[,1]
spp.genera[1,1]<-"Abruss"
spp.genera[1,1]<-c("Abruss")
class(spp.genera[1,1])
as.character(spp.genera[,1])
spp.genera[1,1]<-c("Abruss")
class(spp.genera[,1])
class(spp.genera)
as.character(spp.genera[1,1])
# counting species of climbers per genera
spp.genera<-as.data.frame(table(unlist(climbers_acc$genus)))
colnames(spp.genera)<-c("Genus", "Nr")
spp.genera<-spp.genera[order(spp.genera$Nr),]
# calculating the proportions
spp.genera[,1] == spp.all[,1]
# counting species of climbers per genera
spp.genera<-as.data.frame(table(unlist(climbers_acc$genus)))
colnames(spp.genera)<-c("Genus", "Nr")
# calculating the proportions
spp.genera[,1] == spp.all[,1]
percent<-data.frame(spp.all$Genus, c(spp.genera$Nr/spp.all$Nr))
View(percent)
colnames(percent)<-c("Genus","perc_NT_spp")
percent<-percent[order(-percent$perc_NT_spp),]
# selecting only genera with >75%
genera75<-subset(percent.POWO, perc_NT_spp>=0.75) # 184 genera
View(genera75.POWO)
View(genera75)
genera<-as.character(genera75$Genus)
# getting the ages
genera<-as.character(genera75$Genus)
results <- data.frame(nrow=length(genera),ncol=2)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, ? pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condi??o n?o ? fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(treegenera, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
#results[i,2]<-"/"
results[i,2]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
#crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
#results[i,2]<-crown_age
results[i,2]<-stem_age
}
}
View(results)
resultslcvp<-readRDS(file = "G:/Meu Drive/Papers/Diversificação/climbers/Data/crown_stem_ages.Rdata")
View(resultslcvp)
rm(resultslcvp)
View(APGIV)
##### preparing the input table for the analyses #####
colnames(results)<-c("Genus","Stem_Age")
results<-results[order(results$Genus),]
results<-subset(results, Stem_Age!="/") # deixando s? generos que tem Stem Age
length(results$Genus) # 143
saveRDS(results, file = "G:/Meu Drive/Papers/Diversificação/climbers/Data/crown_stem_ages.POWO.Rdata")
f<-spp.all$Genus %in% results$Genus
f<-as.numeric(which(f==T))
f
rm(d,f)
View(example)
f<-spp.all$Genus %in% results$Genus
f<-as.numeric(which(f==T))
d<-spp.all[f,]
d<-d[order(d$Genus),]
table<-cbind(results,d$Nr)
View(table)
f<-spp.all$Genus %in% results$Genus
f<-as.numeric(which(f==T))
d<-spp.all[f,]
d<-d[order(d$Genus),]
View(d)
View(results)
d$Genus == results$Genus
t<-cbind(results,d$Nr)
View(t)
# creating a column with the climbing mechanisms of genera #
# excluding genera with more than one mechanism
genera_list <- unique(climbers$Genus)
to_exclude <- c()
to_include <- data.frame(matrix(nrow=0,ncol=2))
for(i in 1:length(genera_list)){
subset <- climbers[climbers$Genus==genera_list[i],]
if(length(table(subset$CM))==1) {
to_include <- rbind(to_include, c(genera_list[i], subset$CM[1]))
} else {
to_exclude <- c(to_exclude, genera_list[i])
}
}
print(to_exclude) #check those to exclude
colnames(to_include) <- c("Genus","CM")
tt <- merge(results2, to_include, by="Genus")
tt <- merge(results, to_include, by="Genus")
View(tt)
##### table for the M&S analyses #####
a <- data.frame(taxa=tt$Genus,
diversity=tt$Nr,
node=c("SG"),
age_mean=as.numeric(tt$Stem_Age),
stringsAsFactors = FALSE)
t<-cbind(results,d$Nr)
colnames(t)<-c("Genus", "Stem_Age", "Nr")
tt <- merge(results, to_include, by="Genus") # 139 genera with >=75% of species being neotropical climbers, all with the same mechanism
##### table for the M&S analyses #####
a <- data.frame(taxa=tt$Genus,
diversity=t$Nr,
node=c("SG"),
age_mean=as.numeric(tt$Stem_Age),
stringsAsFactors = FALSE)
tt <- merge(t, to_include, by="Genus") # 139 genera with >=75% of species being neotropical climbers, all with the same mechanism
##### table for the M&S analyses #####
a <- data.frame(taxa=tt$Genus,
diversity=tt$Nr,
node=c("SG"),
age_mean=as.numeric(tt$Stem_Age),
stringsAsFactors = FALSE)
View(a)
rm(p, powo) # -> apagar esses 2 pra nao ficar com um R space gigante
View(a)
p<- read.delim("G:/Meu Drive/Papers/Diversificação/wcvp_v7_dec_2021.txt", sep="|", header=T)
p<-subset(p, rank=="SPECIES") # coluna 'taxon_name' pra nomes
powo<-subset(p, taxonomic_status=="Accepted")
View(powo)
p<- read.delim("G:/Meu Drive/Papers/Diversificação/wcvp_v7_dec_2021.txt", sep="|", header=T)
View(p)
p2<-subset(p, rank=="SPECIES") # coluna 'taxon_name' pra nomes
powo<-subset(p2, taxonomic_status=="Accepted")
##### generating objects #####
# filtering powo to climbing accepted species
c <- p2 %>% filter(taxon_name %in% climbers$Species) # works fine
p3 <- subset(p,rank=="GENUS")
p3 <- subset(p3,taxonomic_status=="Accepted")
p3 <- subset(p,rank=="GENUS")
View(p3)
p3 <- subset(p3,taxonomic_status=="Accepted")
orders<-p3$genus %in% a$taxa
orders<-as.numeric(which(orders==T))
orders<-p3[orders,]
View(orders)
orders<-distinct(orders,genus,.keep_all = T)
View(orders)
orders<-orders[,c("order","genus")]
orders<-orders[,2:3]
length(orders)
length(orders[,1])
orders<-orders[order(orders$Genus),]
orders<-orders[order(-orders$Genus),]
order(orders$Genus)
orders<-orders[order(-orders$genus),]
order(-orders$genus)
order(orders$genus)
orders<-orders[order(orders$genus),]
rownames(orders)<-c(1:139)
orders<-orders %>% add_column(Group = NA)
for (i in 1:length(orders$order)) {
if (orders[i,1]=="Piperales"){
orders[i,3]<-"Magnoliids"
next
}
if (orders[i,1] %in% c("Alismatales", "Asparagales", "Pandanales")==T){
orders[i,3]<-"Monocots"
next
}
if (orders[i,1] %in% c("Celastrales","Malpighiales","Cucurbitales","Fabales","Rosales","Sapindales")==T){
orders[i,3]<-"Superrosids"
next
}
if (orders[i,1] %in% c("Gentianales","Asterales","Dilleniales","Lamiales","Ericales","Cornales","Caryophyllales","Solanales","Icacinales")==T){
orders[i,3]<-"Superasterids"
next
}
if (orders[i,1]=="Ranunculales"){
orders[i,3]<-"Ranunculales"
}
}
orders<-orders %>% add_column(Order = NA)
p3 <- subset(p,rank=="GENUS")
p3 <- subset(p3,taxonomic_status=="Accepted")
orders<-p3$genus %in% a$taxa
orders<-as.numeric(which(orders==T))
orders<-p3[orders,]
orders<-distinct(orders,genus,.keep_all = T)
orders<-orders[,2:3]
orders<-orders[order(orders$genus),]
rownames(orders)<-c(1:139)
orders<-orders %>% add_column(Order = NA)
orders<-orders %>% add_column(Group = NA)
p3 <- subset(p,rank=="GENUS")
p3 <- subset(p3,taxonomic_status=="Accepted")
orders<-p3$genus %in% a$taxa
orders<-as.numeric(which(orders==T))
orders<-p3[orders,]
orders<-distinct(orders,genus,.keep_all = T)
orders<-orders[,2:3]
orders<-orders[order(orders$genus),]
rownames(orders)<-c(1:139)
orders<-orders %>% add_column(order = NA)
orders<-orders %>% add_column(clade = NA)
p3 <- subset(p,rank=="GENUS")
p3 <- subset(p3,taxonomic_status=="Accepted")
orders<-p3$genus %in% a$taxa
orders<-as.numeric(which(orders==T))
orders<-p3[orders,]
orders<-distinct(orders,genus,.keep_all = T)
orders<-orders[,2:3]
orders<-orders[order(orders$genus),]
rownames(orders)<-c(1:139)
#orders<-orders %>% add_column(order = NA)
orders<-orders %>% add_column(clade = NA)
rm(p, powo) # -> apagar esses 2 quando for fechar o R pra nao ficar com um R space gigante
rm(p, p2, powo) # -> apagar esses 2 quando for fechar o R pra nao ficar com um R space gigante
