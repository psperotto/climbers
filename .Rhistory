stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
tip_numbers <- grep(genera[i], tree$tip.label)
crown_node <- mrca.phylo(tree, tip_numbers)
genera[i]
View(tree)
crown_node <- mrca.phylo(tree, tip_numbers)
tree$tip.label
tip_numbers
View(results)
genera[i]
genera[[i]]
1:length(genera)
genera[[1]]
genera[1]
genera <- as.character(sppclimbers_recount[,1])
genera[1]
tip_numbers <- grep(genera[1], tree$tip.label)
crown_node <- mrca.phylo(tree, tip_numbers)
tip_numbers <- grep(genera, tree$tip.label)
library(phangorn)
library(ape)
library(phytools)
library(geiger)
library(ape)
library(magrittr)
library(diversitree)
library(dismo)
library(hisse)
library(CoordinateCleaner)
library(monographaR)
library(dplyr)
library(devtools)
library(lcvplants)
library(beepr)
library(tidyverse)
library(taxize)
results[1,1:3]<-"empty"
View(results)
results[1,1:3]<-"/"
results[1,1]<-genera[1]
results[1,1]<-genera[1]
results[1,2:3]<-"/"
[108]
genera[108]
which(tree$tip.label[108])
tree$tip.label[108]
which(tree$tip.label == "Calystegia")
tip_numbers <- grep(genera[3], tree$tip.label)
tip_numbers <- grep(genera[53], tree$tip.label)
tip_numbers
tip_numbers <- grep(genera[1], tree$tip.label)
crown_node <- mrca.phylo(tree, tip_numbers)
results <- matrix(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label) {
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
}
}
}
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label) {
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
}
}
}
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
}
}
results
?Ancestors
tip_numbers
tip_numbers <- grep(genera[1], tree$tip.label)
tip_numbers
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results <- matrix(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
} else {
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
} else {
next
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
View(results)
results <- matrix(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
View(results)
crown_node
tip_numbers
genera[1]
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
View(results)
stem_age
crown_age
stem_node
tip_numbers
Ancestors(tree, tip_numbers, type = "all")
Ancestors(tree, tip_numbers, type = "parent")
tree2 <- rtree(10)
plot(tree2, show.tip.label = FALSE)
nodelabels()
tiplabels()
Ancestors(tree2, 1:3, "all")
Ancestors(tree2, 1:3, "parent") # te dá todos os ancestrais dos tips indicados
genera[108]
tip_numbers <- grep(genera[108], tree$tip.label)
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,3]<-stem_age
crown_node
stem_node
tip_numbers
tip_numbers <- grep(genera[2], tree$tip.label)
crown_node <- mrca.phylo(tree, tip_numbers)
crown_node
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_node
stem_node <- Ancestors(tree, crown_node, type = "parent")
stem_node
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
crown_age
stem_age
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
crown_node
tip_numbers
genera[6]
View(results)
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[6], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
} else {
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[6], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
} else {
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[6], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
} else {
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
?Ancestors
######### funçoes do phangorn
tree2 <- rtree(10)
plot(tree2, show.tip.label = FALSE)
nodelabels()
tiplabels()
plot(tree2, show.tip.label = FALSE)
Ancestors(tree2, 1:3, "parent") # te dá todos os ancestrais dos tips indicados
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[6], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
} else {
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
} else {
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
tip_numbers
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
results <- matrix(nrow=length(genera),ncol=3)
# tem generos no genera q nao estao amostrados na tree,
# fazer um if else pra pular pro proximo qdo encontrar
# um desses, e tb um if else pra quando tem um tip só
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
results[V1]<-"Genus"
names(results)
?colnames
colnames(results)<-c("Genus", "Crown Age","Stem Age")
saveRDS(results, file = "crown_stem_ages.Rdata")
View(get.node.age)
library(phangorn)
library(ape)
View(results)
class(results)
results <- matrix(nrow=length(genera),ncol=3)
class(results)
library(beepr)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
View(results)
colnames(results)<-c("Genus", "Crown Age","Stem Age")
saveRDS(results, file = "crown_stem_ages.Rdata")
as.data.frame(results)
View(results)
