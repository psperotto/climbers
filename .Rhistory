rates.to.plot <- c()
states.to.plot <- c()
if(legend=="all" | legend=="tips") {
rates.to.plot <- append(rates.to.plot, rates.tips)
states.to.plot <- append(states.to.plot, states.tips)
}
if(legend=="all" | legend=="internal") {
rates.to.plot <- append(rates.to.plot, rates.internal)
states.to.plot <- append(states.to.plot, states.internal)
}
if(legend.kernel.rates=="auto") {
if(length(unique(rates.to.plot))<=4) {
legend.kernel.rates <- "hist"
} else {
legend.kernel.rates <- "rectangular"
}
}
if(legend.kernel.states=="auto") {
if(length(unique(states.to.plot))<=4) {
legend.kernel.states <- "hist"
} else {
legend.kernel.states <- "rectangular"
}
}
rates.density <- GetNormalizedDensityPlot(rates.to.plot, rate.lims, legend.kernel.rates)
#states.density <- GetNormalizedDensityPlot(states.to.plot, state.lims, legend.kernel.states)
#states.density$y <- (-1) * states.density$y #so it gets drawn below the other one
# rates.density <- c()
# states.density <- c()
# if (legend.kernel=="hist") {
# rates.density<-hist(rates.to.plot, breaks=seq(from=rate.lims[1], to=rate.lims[2], length.out = max(100,nclass.Sturges(rates.to.plot)+2)), plot=FALSE)
# states.density<-hist(states.to.plot, breaks=seq(from=state.lims[1], to=state.lims[2], length.out = max(100,nclass.Sturges(states.to.plot)+2)), plot=FALSE)
# rates.density$x <- rates.density$mid
# rates.density$y <- rates.density$density
# states.density$x <- states.density$mid
# states.density$y <- states.density$density
# } else {
# rates.density <- density(rates.to.plot, from=rate.lims[1], to=rate.lims[2], kernel=legend.kernel)
# states.density <- density(states.to.plot, from=state.lims[1], to=state.lims[2], kernel=legend.kernel)
# }
# rates.density$x <- (rates.density$x - rate.lims[1]) / (rate.lims[2]-rate.lims[1]) #so it goes from zero to one
# rates.density$y <- rates.density$y/max(rates.density$y)
# states.density$y <- (-1) * states.density$y/max(states.density$y)
# states.density$x <- (states.density$x - state.lims[1]) / (state.lims[2]-state.lims[1]) #so it goes from zero to one
# if(legend=="rect") {
# rates.density$y <- rep(1, length(rates.density$y))
# states.density$y <- rep(-1, length(states.density$y))
# }
par(lend=1)
segments(x0=rates.density$x, y0=rep(0, length(rates.density$y)), y1=rates.density$y, col=rate.colors[1+as.integer(round((length(rate.colors)-1)* rates.density$x))], lwd=ifelse(legend.kernel.rates=="hist",4,1))
text(x=0, y=1.2, labels=format(rate.lims[1], digits=2), cex=legend.cex)
text(x=1, y=1.2, labels=format(rate.lims[2], digits=2), cex=legend.cex)
text(x=0.5, y=1.2, labels=rate.param, cex=legend.cex)
#        lines(rates.density$x, rates.density$y, lwd=0.5, col="gray")
#segments(x0=states.density$x, y0=rep(0, length(states.density$y)), y1=states.density$y, col=state.colors[1+as.integer(round((length(state.colors)-1)* states.density$x))], lwd=ifelse(legend.kernel.states=="hist",4,1))
#text(x=0, y=-1.2, labels="0", cex=legend.cex)
#text(x=1, y=-1.2, labels="1", cex=legend.cex)
#text(x=0.5, y=-1.2, labels="State", cex=legend.cex)
#        lines(states.density$x, states.density$y, lwd=0.5, col="gray")
#        lines(rates.density$x, 0*rates.density$y, lwd=0.5, col="gray")
}
## Return par to the previous state.
par( old.par )
return(list(rate.tree=rate.tree))
}
all_recons
View(all_recons)
all_recons[[1]][["rates.mat"]]
View(all_recons)
plot(all_recons[[1]]$phy)
try(axisPhylo())
pdf("all_recons.pdf")
for(label_index in seq_along(labels)){
one_label <- labels[label_index]
subset_pre_summary_files <- pre_summary_files[grep(one_label, pre_summary_files)]
all_recons <- list()
for(model_index in 1:length(subset_pre_summary_files)) {
load(paste0(misse.wd, "/", subset_pre_summary_files[model_index]))
all_recons[[model_index]] <- hisse_recon
}
try(plot.misse.states(all_recons, fsize=0.3, type="phylogram"))
try(plot(all_recons[[1]]$phy))
try(axisPhylo())
}
library(ape)
library(hisse)
library(parallel)
library(drake)
library(phytools)
base.dir = "/Users/thaisvasconcelos/Desktop/treebank/treebank"
misse.wd = paste0(base.dir,"/misse_results")
# listing files
done_files <- list.files(misse.wd)[grep("done_recon_", list.files(misse.wd))]
pre_summary_files <- list.files(misse.wd)[grep("pre_summarizing_recon", list.files(misse.wd))]
# Making labels
labels <- gsub(paste0(c("beaulieu3_done_recon_","_newrun.rda"), collapse = "|"),"",done_files)
pdf("all_recons.pdf")
for(label_index in seq_along(labels)){
one_label <- labels[label_index]
subset_pre_summary_files <- pre_summary_files[grep(one_label, pre_summary_files)]
all_recons <- list()
for(model_index in 1:length(subset_pre_summary_files)) {
load(paste0(misse.wd, "/", subset_pre_summary_files[model_index]))
all_recons[[model_index]] <- hisse_recon
}
try(plot.misse.states(all_recons, fsize=0.3, type="phylogram"))
try(plot(all_recons[[1]]$phy))
try(axisPhylo())
}
dev.off()
dev.off()
rm(list=ls())
#rm(list=ls())
library(ape)
library(hisse)
library(parallel)
library(drake)
library(phytools)
setwd("~/Desktop/treebank/treebank")
base.dir = "/Users/thaisvasconcelos/Desktop/treebank/treebank"
misse.wd = paste0(base.dir,"/misse_results")
# listing files
done_files <- list.files(misse.wd)[grep("done_recon_", list.files(misse.wd))]
pre_summary_files <- list.files(misse.wd)[grep("pre_summarizing_recon", list.files(misse.wd))]
# Making labels
labels <- gsub(paste0(c("beaulieu3_done_recon_","_newrun.rda"), collapse = "|"),"",done_files)
pdf("all_recons_trees_netdiv.pdf")
#all_tip_rates <- matrix(nrow=0, ncol=7)
for(label_index in seq_along(labels)){
print(label_index)
one_label <- labels[label_index]
subset_pre_summary_files <- pre_summary_files[grep(one_label, pre_summary_files)]
all_recons <- list()
for(model_index in 1:length(subset_pre_summary_files)) {
load(paste0(misse.wd, "/", subset_pre_summary_files[model_index]))
all_recons[[model_index]] <- hisse_recon
}
#tip.rates <- NULL
#try(tip.rates <- GetModelAveRates(all_recons, type = "tips"))
#if(!is.null(tip.rates)){
#      all_tip_rates <- rbind(all_tip_rates, tip.rates)
#}
try(plot(all_recons[[1]]$phy, cex=0.3, main=one_label))
try(axisPhylo())
try(plot.misse.states(all_recons, fsize=0.3, type="phylogram", rate.param = "net.div"))
}
dev.off()
labels
label_index
# Making labels
labels <- gsub(paste0(c("beaulieu3_done_recon_","beaulieulab4_done_recon_","_newrun.rda"), collapse = "|"),"",done_files)
print(label_index)
one_label <- labels[label_index]
subset_pre_summary_files <- pre_summary_files[grep(one_label, pre_summary_files)]
all_recons <- list()
for(model_index in 1:length(subset_pre_summary_files)) {
load(paste0(misse.wd, "/", subset_pre_summary_files[model_index]))
all_recons[[model_index]] <- hisse_recon
}
try(plot(all_recons[[1]]$phy, cex=0.3, main=one_label))
try(plot.misse.states(all_recons, fsize=0.3, type="phylogram", rate.param = "net.div"))
dev.off()
pdf("all_recons_trees_netdiv.pdf")
#all_tip_rates <- matrix(nrow=0, ncol=7)
for(label_index in seq_along(labels)){
print(label_index)
one_label <- labels[label_index]
subset_pre_summary_files <- pre_summary_files[grep(one_label, pre_summary_files)]
all_recons <- list()
for(model_index in 1:length(subset_pre_summary_files)) {
load(paste0(misse.wd, "/", subset_pre_summary_files[model_index]))
all_recons[[model_index]] <- hisse_recon
}
#tip.rates <- NULL
#try(tip.rates <- GetModelAveRates(all_recons, type = "tips"))
#if(!is.null(tip.rates)){
#      all_tip_rates <- rbind(all_tip_rates, tip.rates)
#}
try(plot(all_recons[[1]]$phy, cex=0.3, main=one_label))
try(axisPhylo())
try(plot.misse.states(all_recons, fsize=0.3, type="phylogram", rate.param = "net.div"))
}
dev.off()
rm(list=ls())
#rm(list=ls())
library(ape)
library(hisse)
library(parallel)
library(drake)
library(phytools)
base.dir = "/Users/thaisvasconcelos/Desktop/treebank/treebank"
misse.wd = paste0(base.dir,"/misse_results")
# listing files
done_files <- list.files(misse.wd)[grep("done_recon_", list.files(misse.wd))]
pre_summary_files <- list.files(misse.wd)[grep("pre_summarizing_recon", list.files(misse.wd))]
# Making labels
labels <- gsub(paste0(c("beaulieu3_done_recon_","beaulieulab4_done_recon_","_newrun.rda"), collapse = "|"),"",done_files)
pdf("all_recons_trees_netdiv.pdf")
#all_tip_rates <- matrix(nrow=0, ncol=7)
for(label_index in seq_along(labels)){
print(label_index)
one_label <- labels[label_index]
subset_pre_summary_files <- pre_summary_files[grep(one_label, pre_summary_files)]
all_recons <- list()
for(model_index in 1:length(subset_pre_summary_files)) {
load(paste0(misse.wd, "/", subset_pre_summary_files[model_index]))
all_recons[[model_index]] <- hisse_recon
}
#tip.rates <- NULL
#try(tip.rates <- GetModelAveRates(all_recons, type = "tips"))
#if(!is.null(tip.rates)){
#      all_tip_rates <- rbind(all_tip_rates, tip.rates)
#}
try(plot(all_recons[[1]]$phy, cex=0.3, main=one_label))
try(axisPhylo())
try(plot.misse.states(all_recons, fsize=0.3, type="phylogram", rate.param = "net.div"))
}
dev.off()
setwd("~/Desktop/Colabs/Patricia_Climbers/climbers")
# loading packages
library(lcvplants)
library(beepr)
library(phangorn)
library(ape)
library(dplyr)
library(arsenal)
library(tidyverse)
library(geiger)
# beep("mario")
# saveRDS(h,file="LCVP_climbers.Rdata")
h <- readRDS(file="LCVP_climbers.Rdata")
accepted <- subset(h, Status=="accepted")
problems <- subset(h, Status!="accepted")
# counting genera of climbers
genera <- unique(accepted$Genus) # 689 generos, 100 a menos que o database original...
# counting species of NT climbers in every genus
sppclimbers<-as.data.frame(table(unlist(accepted$Genus)))
colnames(sppclimbers)<-c("Genus", "Nr")
# counting all species for every genus of NT climbers
list <- list()
for (i in 1:length(genera))  {
list[[i]]<-LCVP(genera[[i]], genus_tab = T)
}
# glueing together all species for every genus of climbers and counting them
x <- do.call(rbind,list)
x <- subset(x, Status=="accepted")
#saveRDS(sppall, file="sppall.Rdata")
sppall <- readRDS(file="sppall.Rdata")
#saveRDS(sppall, file="sppall.Rdata")
#-------------------------------
#-------------------------------
sppall <- readRDS(file="sppall.Rdata")
#------------------------------- checkpoint
sppall <- readRDS(file="sppall.Rdata")
# finding the genera in sppall but not in sppclimbers
z <- sppall$Genus %in% sppclimbers$Genus
z<-as.numeric(which(z==F))
# excluding these genera from sppall
sppall2 <- sppall[-z,]
sppall2 <- sppall2[order(sppall2$Genus),]
rownames(sppall2) <- c(1:689)
sppclimbers <- sppclimbers[order(sppclimbers$Genus),]
sppclimbers
#------------------------------- checkpoint
sppall <- readRDS(file="sppall.Rdata")
# finding the genera in sppall but not in sppclimbers
z <- sppall$Genus %in% sppclimbers$Genus
z <- as.numeric(which(z==F))
# excluding these genera from sppall
sppall2 <- sppall[-z,]
sppall2 <- sppall2[order(sppall2$Genus),]
rownames(sppall2) <- c(1:689)
sppclimbers <- sppclimbers[order(sppclimbers$Genus),]
# calculating the proportions
percent<-data.frame(sppall2$Genus, c(sppclimbers$Nr/sppall2$Nr))
colnames(percent)<-c("Genus","perc_NT_spp")
#------------------------------- checkpoint
genera75 <- readRDS("genera75.Rdata")
# read tree
tree <- read.tree(file="GBMB.tre")
# renaming the tips of the tree to contain only the genus
n<-tree$tip.label
# renaming the tips of the tree to contain only the genus
n <- tree$tip.label
n <- strsplit(n,"_") #n is a list
#------------------------------- checkpoint
# getting age of stem and crown node
treegenera <- readRDS("treegenera.RDS")
library(phangorn)
library(ape)
get.node.age <- function (phy) {
root.node <- length(phy$tip.label)+1
seq.nodes <- phy$edge
dists <- phy$edge.length
res <- numeric(max(phy$edge))
for (i in seq_len(nrow(seq.nodes))) {
res[seq.nodes[i, 2]] <- res[seq.nodes[i,1]] + dists[i]
}
ages <- abs(round(res,3)-round(max(res),3))
return(ages)
} # fun?ao pra pegar os node ages
genera<-as.character(genera75$Genus)
results <- matrix(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, ? pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condi??o n?o ? fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(treegenera, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
# ajeitando o objeto 'results'
results<-as.data.frame(results)
colnames(results)<-c("Genus", "Crown_Age","Stem_Age")
results<-results[order(results$Genus),]
results<-subset(results, Stem_Age!="/") # deixando s? generos que tem Stem Age
length(results$Genus) # 119
rownames(results)<-c(1:119)
# selecionar do sppall2 as linhas de Genus q sao iguais aos genera in 'results'
f<-sppall2$Genus %in% results$Genus
f<-as.numeric(which(f==T))
sppall3<-sppall2[f,]
sppall3<-sppall3[order(sppall3$Genus),]
rownames(sppall3)<-c(1:119)
# colar a coluna 'Nr' de sppall3 com results
results2<-cbind(results,sppall3$Nr)
colnames(results2)[4]<-"Nr"
# criar outra coluna com o mecanismo de escalada de cada genero #
climbers <- read.csv("climber_database.csv")
# excluding genera with more than one mechanism
genera_list <- unique(climbers$Genus)
to_exclude <- c()
to_include <- data.frame(matrix(nrow=0,ncol=2))
for(i in 1:length(genera_list)){
subset <- climbers[climbers$Genus==genera_list[i],]
if(length(table(subset$CM))==1) {
to_include <- rbind(to_include, c(genera_list[i], subset$CM[1]))
} else {
to_exclude <- c(to_exclude, genera_list[i])
}
}
colnames(to_include) <- c("Genus","CM")
table_final <- merge(results2, to_include, by="Genus")
# criar coluna dizendo qual grande grupo (monocots, asteridae, rosidae, etc) #
orders<-accepted$Genus %in% table_final$Genus
orders<-as.numeric(which(orders==T))
orders<-accepted[orders,]
orders<-distinct(orders,Genus,.keep_all = T)
orders<-orders[,c("Order","Genus")]
orders<-orders[order(orders$Genus),]
rownames(orders)<-c(1:117)
orders<-orders %>% add_column(Group =NA)
for (i in 1:length(orders$Order)) {
if (orders[i,1]=="Piperales"){
orders[i,3]<-"Magnoliids"
next
}
if (orders[i,1] %in% c("Alismatales", "Asparagales", "Pandanales")==T){
orders[i,3]<-"Monocots"
next
}
if (orders[i,1] %in% c("Celastrales","Malpighiales","Cucurbitales","Fabales","Rosales","Sapindales")==T){
orders[i,3]<-"Rosids"
next
}
if (orders[i,1] %in% c("Gentianales","Asterales","Lamiales","Ericales","Cornales","Solanales","Icacinales")==T){
orders[i,3]<-"Asterids"
next
}
if (orders[i,1] %in%  c("Dilleniales","Caryophyllales","Ranunculales")==T){
orders[i,3]<-"Other"
}
}
citation(sp)
library(sp)
citation("sp")
citation("rgbif")
setwd("~/Desktop/Colabs/Patricia_Climbers/climbers")
rm(list=ls())
data_dir <- paste0(getwd(), "/Data")
data_dir
all_climbers <- read.csv(paste0(data_dir, "/climber_database.csv"))
# (2) Loading database of all Neotropical plants
all_neotropical <- readRDS(paste0(data_dir, "/full_neotropical_diversity.Rdata"))
library(raster)
# (2) Loading database of all Neotropical plants
all_neotropical <- readRDS(paste0(data_dir, "/full_neotropical_diversity.Rdata"))
all_neotropical
plot(all_neotropical)
library(maptools)
data("wrld_simpl")
plot(wrld_simpl, add=T)
mech1 <- readRDS(paste0(data_dir, "/Mechanism_1.Rdata"))
plot(mech1)
plot(wrld_simpl, add=T)
list.files(data_dir, "Mechanism")
list.files(data_dir, paste0(c("Mechanism", ".Rdata"), collapse = "|"))
list.files(data_dir)
grep(paste0(c("Mechanism", ".Rdata"), collapse="|"), list.files(data_dir))
grep(paste0(c("Mechanism", ".Rdata"), collapse="|"), list.files(data_dir), perl=TRUE)
grepl(paste0(c("Mechanism", ".Rdata"), collapse="|"), list.files(data_dir), perl=TRUE)
list.files(data_dir)
grep(".Rdata", list.files(data_dir))
list.files(data_dir)
list.files(data_dir)[grep(".Rdata", list.files(data_dir))]
all_Rdata <- list.files(data_dir)[grep(".Rdata", list.files(data_dir))]
all_Rdata
grep("Mechanism", all_Rdata)
all_Rdata[grep("Mechanism", all_Rdata)]
all_mechs <- all_Rdata[grep("Mechanism", all_Rdata)]
mech_maps <- lapply(paste0(data_dir, "/", all_mechs), readRDS)
mech_maps
mech_maps
mech_maps
all_climbers
all_climbers_map <- stack(mech_maps)
mech_maps
#template.map=NULL
#if(is.null(template.map)) {
template.map <- readRDS("Data/template.map.Rdata")
mech_maps
tmp.raster.list <- list()
tmp.raster.list <- list()
for (i in 1:length(mech_maps)) {
r1 <- ranges[[i]]
r1 <- raster::resample(r1, template.map)
r1[is.na(r1)] <- 0
tmp.raster.list[[i]] <- raster::mask(r1, template.map)
print(i)
}
tmp.raster.list <- list()
for (i in 1:length(mech_maps)) {
r1 <- mech_maps[[i]]
r1 <- raster::resample(r1, template.map)
r1[is.na(r1)] <- 0
tmp.raster.list[[i]] <- raster::mask(r1, template.map)
print(i)
}
sprichness_map <- raster::calc(raster::stack(tmp.raster.list), sum)
sprichness_map
plot(sprichness_map)
sprichness_map
all_neotropical
sprichness_map <- raster::crop(sprichness_map, raster::extent(all_neotropical))
sprichness_map
#saveRDS(tmp.raster.list, file=paste0("~/Desktop/MiSSEgradient/MiSSEGradient/regressions_plan/Data/1_rate_rasters/all_species_stack.Rdata"))
plot(sprichness_map)
#saveRDS(tmp.raster.list, file=paste0("~/Desktop/MiSSEgradient/MiSSEGradient/regressions_plan/Data/1_rate_rasters/all_species_stack.Rdata"))
plot(mech_maps[[1]])
#saveRDS(tmp.raster.list, file=paste0("~/Desktop/MiSSEgradient/MiSSEGradient/regressions_plan/Data/1_rate_rasters/all_species_stack.Rdata"))
plot(mech_maps[[2]])
#saveRDS(tmp.raster.list, file=paste0("~/Desktop/MiSSEgradient/MiSSEGradient/regressions_plan/Data/1_rate_rasters/all_species_stack.Rdata"))
plot(mech_maps[[3]])
sprichness_map
plot(sprichness_map)
plot(wrld_simpl, add=T)
plot(all_neotropical)
raster::stack(sprichness_map, all_neotropical)
sprichness_map
all_neotropical
template.map <- all_neotropical
template.map
template.map[]
!is.na(template.map[])
template.map[!is.na(template.map[])] <- 0
plot(template.map)
tmp.raster.list <- list()
for (i in 1:length(mech_maps)) {
r1 <- mech_maps[[i]]
r1 <- raster::resample(r1, template.map)
r1[is.na(r1)] <- 0
tmp.raster.list[[i]] <- raster::mask(r1, template.map)
print(i)
}
sprichness_map <- raster::calc(raster::stack(tmp.raster.list), sum)
plot(sprichness_map)
raster::stack(sprichness_map, all_neotropical)
proportion <- raster::calc(raster::stack(sprichness_map, all_neotropical), "/")
proportion <- sprichness_map / all_neotropical
plot(proportion)
proportion <- all_neotropical / sprichness_map
plot(proportion)
raster1 = sprichness_map
raster2 = all_neotropical
raster1[raster1[]==0] <- NA
raster2[raster2[]==0] <- NA
l.model <- stats::lm(raster::getValues(raster1) ~ raster::getValues(raster2), na.action = na.exclude)
res.raster <- template.map
res.raster[] <- as.numeric(stats::residuals.lm(l.model))
res.raster
plot(res.raster)
