class(results)
library(beepr)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], tree$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(tree, tip_numbers)
stem_node <- Ancestors(tree, crown_node, type = "parent")
crown_age <- get.node.age(tree)[crown_node]
stem_age <- get.node.age(tree)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
View(results)
colnames(results)<-c("Genus", "Crown Age","Stem Age")
saveRDS(results, file = "crown_stem_ages.Rdata")
as.data.frame(results)
View(results)
View(sppclimbers_recount)
View(spptotal)
View(spptotal)
View(results)
saveRDS(sppclimbers_recount, file = "sppclimbers.Rdata")
library(lcvplants)
library(beepr)
library(phangorn)
library(ape)
View(mec)
View(h)
library(lcvplants)
library(beepr)
library(phangorn)
library(ape)
h<-readRDS(file="LCVP_climbers.Rdata")
h<-readRDS(file="LCVP_climbers.Rdata")
# another try at standardizing names
setwd("C:/Users/patri/Google Drive/Papers/Diversificação/climbers")
h<-readRDS(file="LCVP_climbers.Rdata")
h<-readRDS(file="LCVP.Rdata")
View(h)
View(h)
accepted<-subset(h, Status=="accepted")
problems<-subset(h, Status!="accepted")
# counting genera of climbers
genera<-unique(accepted$Genus) # 689 generos, 100 a menos que o database original...
# counting species of NT climbers in every genus
sppclimbers<-as.data.frame(table(unlist(accepted$Genus)))
colnames(sppclimbers)<-c("Genus", "Nr")
View(sppclimbers)
list <- list()
for (i in 1:length(genera))  {
list[[i]]<-LCVP(genera[[i]], genus_tab = T)
}
beep("mario")
View(list)
rm(list)
sppall<-readRDS(file="sppall.Rdata")
View(sppclimbers)
View(sppall)
View(sppclimbers)
?setdiff()
View(x)
View(x)
View(x)
z<-setdiff(sppall,sppclimbers)
View(z)
rm(z)
z<-fsetequal(sppall,sppclimbers)
library(dplyr)
z<-anti_join(sppall,sppclimbers)
View(z)
rm(z)
z<-anti_join(sppall$Genus,sppclimbers$Genus)
z<-anti_join(as.data.frame(sppall$Genus),as.data.frame(sppclimbers$Genus))
sppall$Genus
sppclimbers$Genus
?ifelse()
ifelse(sppall$Genus==sppclimbers$Genus, "yes", "no")
install.packages("arsenal")
library(arsenal)
?comparedf()
z<-summary(comparedf(sppall,sppclimbers))
summary(comparedf(sppall,sppclimbers))
View(z)
zz<- sppclimbers$Genus %in% sppall$Genus
which(zz==TRUE)
which(zz==F)
zz<- sppall$Genus %in% sppclimber$Genus
zz<- sppall$Genus %in% sppclimbers$Genus
which(zz==F)
c<-which(zz==F)
sppall[c,]
z<- sppall$Genus %in% sppclimbers$Genus
z<-which(z==F)
sppall[z,]
View(rank_ref)
z<-sppall$Genus %in% sppclimbers$Genus
z<-which(z==F)
z<-sppall[z,]
View(z)
sppall2<-sppall$Genus!=z$Genus
z<-sppall$Genus %in% sppclimbers$Genus
z<-which(z==F)
z<-sppall[z,]$Genus
sppall2<-sppall$Genus!=z
sppall2<-subset(sppall, Genus!=z)
sppall2<-sppall[-z,]
z<-sppall$Genus %in% sppclimbers$Genus
z<-which(z==F)
z<-as.character(sppall[z,]$Genus)
sppall2<-sppall[-z,]
sppall2<-sppall[!z,]
?subset()
sppall2<-subset(sppall, Genus=-z)
sppall2<-subset(sppall, Genus!=z)
sppall
sppall2<-filter(sppall, Genus!=z)
sppall2<-filter(sppall, Genus!=z)
z<-sppall$Genus %in% sppclimbers$Genus
z<-which(z==F)
z<-as.character(sppall[z,]$Genus)
sppall2<- sppall %>% filter(Genus!=z)
View(sppall2)
z
library(tidyverse)
sppall2<- sppall %>% filter(Genus!=z)
sppall2<- sppall %>% filter(Genus %in% -z)
View(sppall)
?filter()
sppall2<-sppall[c,]
sppall2<-sppall[-c,]
z<-sppall$Genus %in% sppclimbers$Genus
z<-which(z==F)
View(sppall2)
View(sppclimbers)
View(sppall2)
# calculating the proportions
percent<-data.frame(genera, c(sppclimbers$Nr/sppall2$Nr))
View(percent)
colnames(percent)<-c("Genus","perc_NT_spp")
# selecting only genera with >75%
genera2<-subset(percent, perc_NT_spp>=0.75)
View(genera2)
View(a)
library(lcvplants)
library(beepr)
library(phangorn)
library(ape)
library(dplyr)
library(arsenal)
library(tidyverse)
View(sppall2)
c(sppclimbers$Nr/sppall2$Nr)
sppall2<-sppall2[order(sppall2$Genus),]
sppclimbers<-sppclimbers[order(sppclimbers$Genus),]
View(sppall2)
View(sppclimbers)
s<-sppall2$Genus==sppclimbers$Genus
sppall2$Genus
s<-sppall2$Genus==sppclimbers$Genus
View(sppall2)
sppclimbers$Genus
sppall2$Genus
sppall2<-sppall[-z,]
View(sppall)
sppall2<-sppall[-z,]
View(sppall2)
z
z<-c(17,59,107,167,173,213,232,274,276,328,387,476,511,594,600,630)
z<-sppall$Genus %in% sppclimbers$Genus
z<-as.numeric(which(z==F))
sppall2<-sppall[-z,]
View(sppall2)
sppall3<-sppall2[-z,]
View(sppall3)
library(lcvplants)
library(beepr)
library(phangorn)
library(ape)
library(dplyr)
library(arsenal)
library(tidyverse)
sppall<-readRDS(file="sppall.Rdata")
z<-sppall$Genus %in% sppclimbers$Genus
z<-as.numeric(which(z==F))
sppall2<-sppall[-z,]
View(sppall2)
sppall2<-sppall[z,]
View(sppall2)
sppall2<-sppall[-z,]
View(sppall2)
k<-c(1:705)
k<-as.numeric(c(1:705))
z<-k-z
z<-sppall$Genus %in% sppclimbers$Genus
z<-as.numeric(which(z==F))
?setdiff()
z
sppall2<-sppall[-17,]
View(sppclimbers)
View(sppall)
View(sppall2)
z<-as.character(which(z==F))
z<-sppall$Genus %in% sppclimbers$Genus
z<-as.character(which(z==F))
sppall2<-sppall[-z,]
z<-sppall$Genus %in% sppclimbers$Genus
z<-as.numeric(which(z==F))
sppall2<-sppall[-z,]
View(sppall2)
sppall2<-sppall2[order(sppall2$Genus),]
sppclimbers<-sppclimbers[order(sppclimbers$Genus),]
rownames(sppall2)<-c(1:689)
# calculating the proportions
percent<-data.frame(sppall2$Genus, c(sppclimbers$Nr/sppall2$Nr))
View(percent)
colnames(percent)<-c("Genus","perc_NT_spp")
# selecting only genera with >75%
genera2<-subset(percent, perc_NT_spp>=0.75)
View(genera2)
genera2<-genera2[,order(genera2$perc_NT_spp)]
# selecting only genera with >75%
genera2<-subset(percent, perc_NT_spp>=0.75)
genera2<-genera2[order(genera2$perc_NT_spp),]
?order()
genera2<-genera2[order(genera2$perc_NT_spp, decreasing=T),]
saveRDS(genera2, file="genera75.Rdata")
# selecting only genera with >75%
genera75<-subset(percent, perc_NT_spp>=0.75)
genera75<-genera75[order(genera75$perc_NT_spp, decreasing=T),]
rm(genera2)
# getting age of stem and crown node
treegenera <- readRDS("treegenera.RDS")
tree <- read.tree(file="GBMB.tre")
# renaming the tips of the tree to contain only the genus
n<-tree$tip.label
n<-strsplit(n,"_") #n is a list
# selecting only the first object in the vectors within the list
list<-list()
for (i in 1:length(n)){
if (length(n[[i]]) > 2) {
list[i]<-paste0(n[[i]][1:2])
} else {
list[i]<-paste0(n[[i]])
}
}
list<-do.call(rbind,list) # returns a dataframe with
list<-as.character(list)
tree$tip.label<-list
# saving the tree with only genera as tips
saveRDS(tree, file="treegenera.RDS")
# getting age of stem and crown node
treegenera <- readRDS("treegenera.RDS")
View(treegenera)
get.node.age <- function (phy) {
root.node <- length(phy$tip.label)+1
seq.nodes <- phy$edge
dists <- phy$edge.length
res <- numeric(max(phy$edge))
for (i in seq_len(nrow(seq.nodes))) {
res[seq.nodes[i, 2]] <- res[seq.nodes[i,1]] + dists[i]
}
ages <- abs(round(res,3)-round(max(res),3))
return(ages)
} # funçao pra pegar
results <- matrix(nrow=length(genera75),ncol=3)
for(i in 1:length(genera75)){
tip_numbers <- grep(genera75[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera75[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera75[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera75[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
# WE DIDI IT BOYSSSS
length(genera75)
length(genera75$Genus)
results <- matrix(nrow=length(genera75$Genus),ncol=3)
for(i in 1:length(genera75$Genus)){
tip_numbers <- grep(genera75$Genus[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera75$Genus[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera75$Genus[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera75$Genus[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
View(results)
colnames(results)<-c("Genus", "Crown Age","Stem Age")
genera75$Genus[i]
genera75$Genus
View(genera75)
rownames(genera75)<-c(1:155)
saveRDS(genera75, file="genera75.Rdata")
genera75$Genus
for(i in 1:length(genera75$Genus)){
tip_numbers <- grep(genera75$Genus[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera75$Genus[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(tree, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera75$Genus[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera75$Genus[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
View(results)
library(lcvplants)
library(beepr)
library(phangorn)
library(ape)
library(dplyr)
library(arsenal)
library(tidyverse)
results <- matrix(nrow=length(genera75$Genus),ncol=3)
View(results)
View(sppall2)
genera
order(genera)
genera
as.data.frame(genera)
genera
genera75$Genus
View(genera75)
View(sppclimbers)
length(genera)
genera<-as.character(genera75$Genus)
results <- matrix(nrow=length(genera),ncol=3)
for(i in 1:length(genera)){
tip_numbers <- grep(genera[i], treegenera$tip.label)
if (length(tip_numbers)==0) {
results[i,1]<-genera[i]
results[i,2:3]<-"/"
# aqui eu disse q se tip_numbers for um integer de tamanho 0, é pra escrever
# o nome do genero e / nas duas colunas -> FUNCIONA!
# nos 'if' statements, se a condição não é fulfilled, o loop ignora e segue pro proximo passo
next
}
if (length(tip_numbers)==1){
stem_node <- Ancestors(treegenera, tip_numbers, type = "parent")
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-"/"
results[i,3]<-stem_age
next # precisa desse 'next' aqui pra mandar o loop NAO seguir adiante
# e ir pro proximo 'i' de 'genera[i]' em vez de seguir adiante no codigo
}
if (length(tip_numbers)>1){ # padronizei o codigo aqui pra 'girar em torno' dos lengths
crown_node <- mrca.phylo(treegenera, tip_numbers)
stem_node <- Ancestors(treegenera, crown_node, type = "parent")
crown_age <- get.node.age(treegenera)[crown_node]
stem_age <- get.node.age(treegenera)[stem_node]
results[i,1]<-genera[i]
results[i,2]<-crown_age
results[i,3]<-stem_age
}
}
#library(beepr)
beep("mario")
View(results)
colnames(results)<-c("Genus", "Crown Age","Stem Age")
fff<-readRDS(file = "crown_stem_ages.Rdata")
View(fff)
rm(fff)
#as.data.frame(results)
saveRDS(results, file = "crown_stem_ages.Rdata")
as.data.frame(results)
saveRDS(results, file = "crown_stem_ages.Rdata")
results<-as.data.frame(results)
saveRDS(results, file = "crown_stem_ages.Rdata")
?data.frame()
ff<-data.frame(nrow=155, ncol=3)
View(ff)
ff<-data.frame(nrow=155, ncol=4)
View(ff)
rm(ff)
sppall3<-sppall2[genera,]
View(sppall3)
sppall3<-subset(sppall2, Genus==genera)
results<-results[order(results$Genus, decreasing=T),]
results<-results[order(results$Genus),]
rownames(results)<-c(1:155)
results2<-results[,"/"]
colnames(results)<-c("Genus", "Crown_Age","Stem_Age")
results2<-results[,Stem_Age!="/"]
results2<-subset(results, Stem_Age!="/")
View(results2)
length(results$Genus)
results<-subset(results, Stem_Age!="/")
length(results$Genus)
rownames(results)<-c(1:119)
saveRDS(results, file = "crown_stem_ages.Rdata")
rm(results2)
View(theplantlist)
# adicionando colunas
f<-results$Genus
sppall3<-sppall2[,Genus==f]
sppall3<-subset(sppall2, Genus==f)
sppall3<-subset(sppall2, Genus=f)
View(sppall3)
which(sppall2==f)
which(sppall2$Genus==f)
class(f)
sppall3<-subset(sppall2, Genus==f)
sppall3<-sppall2[Genus==f,]
# selecionar do sppall2 as linhas de Genus q sao iguais aos genera in 'results'
f<-sppall2$Genus %in% results$Genus
f<-as.numeric(which(f==F))
f
# selecionar do sppall2 as linhas de Genus q sao iguais aos genera in 'results'
f<-sppall2$Genus %in% results$Genus
f<-as.numeric(which(f==T))
sppall3<-sppall2[f,]
View(sppall3)
sppall3<-sppall3[order(sppall3$Genus),]
rownames(sppall3)<-c(1:119)
# colar a coluna 'Nr' de sppall3 com results
results2<-cbind(results,sppall3$Nr)
View(results2)
colnames(results2$`sppall3$Nr`)<-"Nr"
colnames(results2$`sppall3$Nr`)<-c("Nr")
colnames(results2)[,4]<-c("Nr")
colnames(results2)[,4]<-"Nr"
colnames(results2)[4]<-"Nr"
View(accepted)
View(climbers)
saveRDS(results2, file = "partialresults.Rdata")
